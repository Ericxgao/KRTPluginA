// rough expander code needs NP modify idea
// doesn't quite suit my NNNN... NPPNPNN... PPPP... purpose of layouts

// forum curtesy of Count Modula on expanders generic howto.
struct myExpanderMessage {
	bool somethingToGetFromTheExpander;
	int someThingToSendToTheExpander;
};

struct MyModule : Module {
	
	// assuming the expander is on the right
	myExpanderMessage rightMessages[2][1]; // messages to right module (expander)
	
	MyModule() {
		config(NUM_PARAMS, NUM_INPUTS, NUM_OUTPUTS, NUM_LIGHTS);
		
		// parameter/port config goes here
		
		// set the right expander message instances
		rightExpander.producerMessage = rightMessages[0];
		rightExpander.consumerMessage = rightMessages[1];
	}

	void process(const ProcessArgs &args) override {

		// do your processing here
		
		// set up details for the expander
		if (rightExpander.module) {
			if (rightExpander.module->model == modelMyExpander) {
				
				myExpanderMessage *messageToExpander = (myExpanderMessage*)(rightExpander.module->leftExpander.producerMessage);
				myExpanderMessage *messageFromExpander = (myExpanderMessage*)(rightExpander.module->leftExpander.consumerMessage);

				messageToExpander->somethingToSendToTheExpander = someModuleValue;
				
				someExpanderValue = messageFromExpander->someThingToGetFromTheExpander;
				
				rightExpander.module->leftExpander.messageFlipRequested = true;
			}
		}

	}
};

Model *modelMyModule = createModel<MyModule, MyModuleWidget>("MyModule");

//AND

struct MyExpander : Module {
	
	// assuming the controller is on the left
	myExpanderMessage leftMessages[2][1]; // messages from left module (controller module))
	
	MyExpander() {
		config(NUM_PARAMS, NUM_INPUTS, NUM_OUTPUTS, NUM_LIGHTS);
		
		// parameter/port config goes here

		// set the left expander message instances
		leftExpander.producerMessage = leftMessages[0];
		leftExpander.consumerMessage = leftMessages[1];	
	}

	void process(const ProcessArgs &args) override {

		// do your processing here
		
		if (leftExpander.module) {
			if (leftExpander.module->model == modelMyModule) {
					
				myExpanderMessage *messagesFromModule = (myExpanderMessage *)(leftExpander.consumerMessage);
				myExpanderMessage *messagesToModule = (myExpanderMessage *)(leftExpander.producerMessage);

				someValueFromTheModule = messagesFromModule->someThingToSendToTheExpander;
				
				messagesToModule->somethingToGetFromTheExpander = someValueForTheModule;
			}
		}

	}
};

Model *modelMyExpander = createModel<MyExpander, MyExpanderWidget>("MyExpander");

